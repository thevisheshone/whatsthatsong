"0","top_terms_by_topic_LDA <- function(input_text, # should be a columm from a dataframe"
"0","                                   number_of_topics = 5) # number of topics (5 by default)"
"0","{    "
"0","  "
"0","  "
"0","    # create a corpus (type of object expected by tm) and document term matrix"
"0","    CorpusObject <- tm::VCorpus(tm::VectorSource(input_text)) # make a corpus object"
"0","    "
"0","    "
"0","    DTM <- tm::DocumentTermMatrix(CorpusObject) # get the count of words/document"
"0","    # remove any empty rows in our document term matrix (if there are any "
"0","    # we'll get an error when we try to run our LDA): Technically not applicable for current project"
"0","    unique_indexes <- unique(DTM$i) # get the index of each unique value"
"0","    DTM <- DTM[unique_indexes,] # get a subset of only those indexes"
"0","    "
"0","    # preform LDA & get the words/topic in a tidy text format"
"0","    lda <- LDA(DTM, k = number_of_topics, control = list(seed = 1234))"
"0","    topics <- tidy(lda, matrix = ""beta"")"
"0","    "
"0","    custom_stop_words <- tibble(word = customStopWords)"
"0","    # remove stopwords"
"0","    tidyCleaned <- topics %>% # take our tidy dtm and..."
"0","      anti_join(stop_words, by = c(""term"" = ""word"")) %>% # remove English stopwords and..."
"0","      anti_join(custom_stop_words, by = c(""term"" = ""word"")) # remove my custom stopwords"
"0","    "
"0","    # get the top  terms for each topic"
"0","    top_terms <- tidyCleaned  %>% # take the topics data frame and.."
"0","      group_by(topic) %>% # treat each topic as a different group"
"0","      top_n(20, beta) %>% # get the top most informative words"
"0","      ungroup() %>% # ungroup"
"0","      arrange(topic, -beta) # arrange words in descending informativeness"
"0","    "
"0","      return(top_terms)"
"0","}"
"0","plot_top_terms <- function(top_terms) {"
"0","  # plot the top ten terms for each topic in order"
"0","  return(top_terms %>% # take the top terms"
"0","      mutate(term = reorder(term, beta)) %>% # sort terms by beta value "
"0","      ggplot(aes(term, beta, fill = factor(topic))) + # plot beta by theme"
"0","      geom_col(show.legend = FALSE) + # as a bar plot"
"0","      facet_wrap(~ topic, scales = ""free"") + # which each topic in a seperate plot"
"0","      labs(x = NULL, y = ""Beta"") + # no x label, change y label "
"0","      coord_flip() )# turn bars sideways"
"0","}"
